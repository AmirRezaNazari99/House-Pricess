# -*- coding: utf-8 -*-
"""Advaned house price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X78KnO2oH2mlMejsZdNPgAzaIcNxl_mM
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""### Import Data:"""

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train["train_set"] = 1
test["train_set"] = 0

test["SalePrice"] = np.NaN

all_data = pd.concat([train, test])

sns.countplot(x="train_set",data=all_data)

train.head()

train.info()

train.describe()

sns.set(rc={'figure.figsize':(14.7,6)})
sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap="viridis")

all_data.columns

sns.set(rc={'figure.figsize':(12,8.5)})

"""# **Data Visualization:**"""

sns.countplot(x="FireplaceQu", data=all_data)

sns.countplot(x="OverallQual", hue="FireplaceQu", data=all_data, palette="husl")

def fill_FireplaceQu(data):
  FQU = data[0]
  OQ = data[1]

  if pd.isnull(FQU):

    if OQ == 1:
      return "TA"

    elif OQ == 2:
      return "TA"

    elif OQ == 3:
      return "Gd"

    elif OQ == 4:
      return "TA"

    elif OQ == 5:
      return "Gd"

    elif OQ == 6:
      return "TA"

    elif OQ == 7:
      return "TA"

    elif OQ == 8:
      return "Gd"

    elif OQ == 9:
      return "Gd"

    else :
      return "Gd"


  else:
    return FQU

############################################################################
def change_LS(data):
  LS = data
  
  if LS == "Reg":
      return 40
 
  elif LS == "IR1":
      return 30

  elif LS == "IR2":
      return 20

  else:
    return 10

all_data.MSSubClass = all_data.MSSubClass.astype('int')

all_data["FSAreaSF"] = all_data["1stFlrSF"]+all_data["2ndFlrSF"]
all_data["SumPorch"] = all_data["ScreenPorch"] + all_data["3SsnPorch"] + all_data["EnclosedPorch"] + all_data["OpenPorchSF"]
all_data["AllHalfBath"] = all_data["BsmtHalfBath"] + all_data["HalfBath"] 
all_data["AllFullBath"] = all_data["BsmtFullBath"] + all_data["FullBath"] 
all_data["GarageAreaPerCar"] = all_data["GarageArea"] / all_data["GarageCars"]

sns.displot(all_data["SumPorch"], kde=True, color="blue", bins=40)

plt.scatter(all_data["SumPorch"],all_data["SalePrice"], c="blue")

all_data['MSSubClass'] = all_data['MSSubClass'].replace([20,30,40,45,50,60,70,75,80,85,90,120,150,160,180,190],["A","B","C","D","E","F","G","H","I","G","K","L","M","N","O","P"])
all_data['Street'] = all_data['Street'].replace(["Grvl", "Pave"],[0,1])
all_data['LandContour'] = all_data['LandContour'].replace(["Lvl	", "Bnk", "HLS", "Low"],[40,30,20,10])
all_data['OverallQual'] = all_data['OverallQual'] * 10
all_data['OverallCond'] = all_data['OverallCond'] * 10
all_data['ExterCond'] = all_data['ExterCond'].replace(["Ex", "Gd", "TA", "Fa", "Po"],[50,40,30,20,10])
all_data['BsmtQual'] = all_data['BsmtQual'].replace(["Ex", "Gd", "TA", "Fa", "Po", "NA"],[50,40,30,20,10,2])
all_data['BsmtCond'] = all_data['BsmtCond'].replace(["Ex", "Gd", "TA", "Fa", "Po", "NA"],[50,40,30,20,10,2])
all_data['BsmtExposure'] = all_data['BsmtExposure'].replace(["Gd", "Av", "Mn", "No", "NA"],[40,30,20,4,2])
all_data['BsmtFinType1'] = all_data['BsmtFinType1'].replace(["GLQ", "ALQ", "BLQ", "Rec", "LwQ", "Unf", "NA"],[60,50,40,30,20,10,2])
all_data['BsmtFinType2'] = all_data['BsmtFinType2'].replace(["GLQ", "ALQ", "BLQ", "Rec", "LwQ", "Unf", "NA"],[60,50,40,30,20,10,2])
all_data['HeatingQC'] = all_data['HeatingQC'].replace(["Ex", "Gd", "TA", "Fa", "Po"],[50,40,30,20,10])
all_data['CentralAir'] = all_data['CentralAir'].replace(["N", "Y"],[0,1])
all_data['KitchenQual'] = all_data['KitchenQual'].replace(["Ex", "Gd", "TA", "Fa", "Po"],[50,40,30,20,10])
all_data['Functional'] = all_data['Functional'].replace(["Typ", "Min1", "Min2", "Mod", "Maj1", "Maj2", "Sev", "Sal"],[80,70,60,50,40,30,20,10,])
all_data['FireplaceQu'] = all_data['FireplaceQu'].replace(["Ex", "Gd", "TA", "Fa", "Po", "NA"],[50,40,30,20,10,2])
all_data['GarageQual'] = all_data['GarageQual'].replace(["Ex", "Gd", "TA", "Fa", "Po", "NA"],[50,40,30,20,10,2])
all_data['GarageCond'] = all_data['GarageCond'].replace(["Ex", "Gd", "TA", "Fa", "Po", "NA"],[50,40,30,20,10,2])
all_data['PavedDrive'] = all_data['PavedDrive'].replace(["P", "Y", "N"],[20,10,2])


all_data["LotShape"] = all_data["LotShape"].apply(change_LS)

all_data.drop("LotConfig", axis=1, inplace=True)
all_data.drop("Alley", axis=1, inplace=True)
all_data.drop(["PoolQC","Fence"], axis=1, inplace=True)
all_data.drop("Id", axis=1, inplace=True)
all_data.drop(["1stFlrSF","2ndFlrSF"], axis=1, inplace=True)
all_data["FireplaceQu"] = all_data[["FireplaceQu", "OverallQual"]].apply(fill_FireplaceQu, axis=1) 
all_data.drop(["ScreenPorch","3SsnPorch","EnclosedPorch","OpenPorchSF"], axis=1, inplace=True)
all_data.drop(["ExterQual","GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "BsmtHalfBath", "HalfBath", "BsmtFullBath", "FullBath"], axis=1, inplace=True)

"""# **Missing Value:**"""

cat_data = all_data.select_dtypes(include=['object'])
num_data = all_data.select_dtypes(exclude=['object'])

num_col = num_data.columns
num_col = list(num_col)

num_col.remove("SalePrice")

missing_val_count_col = (num_data.isnull().sum())
print(missing_val_count_col[missing_val_count_col > 0])

cat_data = all_data.select_dtypes(include=['object'])
num_data = all_data.select_dtypes(exclude=['object'])

num_col = num_data.columns
num_col = list(num_col)

num_col.remove("SalePrice")

for col in num_col:
  all_data[col].fillna(all_data[col].median(), inplace=True)

# Renew numeric data varieble after fill missing Value
num_data = all_data.select_dtypes(exclude=['object'])

missing_val_count_col = (num_data.isnull().sum())
print(missing_val_count_col[missing_val_count_col > 0])

missing_val_count_col = (cat_data.isnull().sum())
print(missing_val_count_col[missing_val_count_col > 0])

all_data.dropna(subset=["MSZoning", "Utilities", "Exterior1st", "Exterior2nd", "Electrical", "SaleType"], axis=0, inplace=True)
missing_val_count_col = (all_data.isnull().sum())
print(missing_val_count_col[missing_val_count_col > 0])

sns.set(rc={'figure.figsize':(10,8.5)})
sns.countplot(x="MasVnrType", data=all_data)

def fill_MasVnrType(data):
  MVT = data

  if pd.isnull(MVT):
    return "None"


  else:
    return MVT

all_data["MasVnrType"] = all_data["MasVnrType"].apply(fill_MasVnrType)

sns.countplot(x="GarageType", data=all_data)

def fill_GarageType(data):
  GT = data

  if pd.isnull(GT):
    return "Attchd"


  else:
    return GT

all_data["GarageType"] = all_data["GarageType"].apply(fill_GarageType)

all_data["MiscFeature" + "_was_missing"] = all_data["MiscFeature"].isnull()

all_data["MiscFeature_was_missing"] = all_data['MiscFeature_was_missing'].replace([True, False],[0,1])

sns.countplot(x="MiscFeature", data=all_data)

def fill_MiscFeature(data):
  MF = data

  if pd.isnull(MF):
    return "Shed"


  else:
    return MF

all_data["MiscFeature"] = all_data["MiscFeature"].apply(fill_MiscFeature)

missing_val_count_col = (all_data.isnull().sum())
print(missing_val_count_col[missing_val_count_col > 0])

cat_data = all_data.select_dtypes(include=['object'])
num_data = all_data.select_dtypes(exclude=['object'])

#cat_col = cat_data.columns
s = (all_data.dtypes == "object")
cat_col= list(s[s].index)



num_col = num_data.columns
num_col = list(num_col)

num_col.remove("SalePrice")

sale_price = all_data["SalePrice"]
train_set = all_data["train_set"]

MiscFeature_was_missing = all_data["MiscFeature_was_missing"]
CentralAir = all_data["CentralAir"]
Street = all_data["Street"]

num_data.drop(["SalePrice","MiscFeature_was_missing", "CentralAir", "Street","train_set"], axis=1, inplace=True)


num_col = list(num_col) 
num_col.remove("train_set")
num_col.remove("MiscFeature_was_missing")
num_col.remove("CentralAir")
num_col.remove("Street")

from sklearn.preprocessing import StandardScaler

std = StandardScaler()
num_data = pd.DataFrame(std.fit_transform(num_data), columns=num_col)
num_data

from sklearn.preprocessing import OneHotEncoder

OH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)
OH_cat_col = pd.DataFrame(OH_encoder.fit_transform(all_data[cat_col].astype(str)))
OH_cat_col

X_train_copy = X_train.copy()
for i in range(175):
  X_train_copy.rename(columns={i:str(i)}, inplace=True)

all_data = pd.concat([OH_cat_col, num_data], axis=1)

all_data["MiscFeature_was_missing"] = MiscFeature_was_missing.values

all_data["CentralAir"] = CentralAir.values
all_data["Street"] = Street.values
all_data["SalePrice"] = sale_price.values
all_data["train_set"] = train_set.values

train = all_data[all_data.train_set == 1]
test = all_data[all_data.train_set == 0]
train.drop(["train_set"], axis =1, inplace=True)
test.drop(["train_set"], axis =1, inplace=True)

y_train = train["SalePrice"]
X_train = train.drop("SalePrice",axis=1)

test.drop("SalePrice", axis=1, inplace=True)

""".

.

.

.

.

# **Building Model:**
"""

from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import Lasso

"""## **Decision Tree:** """

lr = DecisionTreeRegressor()
for i in range(2,21):
  cv = cross_val_score(lr, X_train_copy, y_train_copy,cv=i)
  print(i ,"", cv.mean())

"""## **Lasso:**"""

y_train_copy = y_train/1000
lr = Lasso()
mean=0
i_final=2
for i in range(2,20):
  cv = cross_val_score(lr, X_train_copy, y_train_copy, cv=i)
  print(i ,"", cv.mean())

  if mean < cv.mean():
    i_fianl = i
    mean = cv.mean()

y_train_copy = y_train/1000
lr = Lasso()
cv = cross_val_score(lr, X_train_copy, y_train_copy, cv=10)